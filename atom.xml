<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>halapro.liu&#39;s blog</title>
  
  <subtitle>三分钟热度工程师</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://halaproliu.github.io/"/>
  <updated>2021-09-09T04:58:25.812Z</updated>
  <id>https://halaproliu.github.io/</id>
  
  <author>
    <name>halapro.liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>苹果IOS手机使用 Shadowsocks 设置教程及抖音国际版tiktok免拔卡使用教程</title>
    <link href="https://halaproliu.github.io/tiktok/"/>
    <id>https://halaproliu.github.io/tiktok/</id>
    <published>2021-09-09T04:31:10.000Z</published>
    <updated>2021-09-09T04:58:25.812Z</updated>
    
    <content type="html"><![CDATA[<p>苹果IOS手机抖音国际版tiktok免拔卡使用教程我们都知道苹果手机想要看抖音国际版tiktok短视频，前提必须是要能科学上网，这样不仅可以看国际版抖音上的小姐姐，还能上油管、谷歌、推特等国外网站。</p><p>苹果手机上国际版抖音需要达到以下3个条件：</p><p>一、有一个可以上国外网站的机场节点——这里推荐使用Bywave机场，拥有ICLP专线，抗封锁能力强，安全高速稳定，所有的节点都可以看Netflix，并且还可以做为游戏加速器使用。<strong><a href="https://freebrid.top/Bywave" target="_blank" rel="noopener">&gt;&gt;点击进入Bywave官网&lt;&lt;</a></strong></p><p>二、有一个美区苹果ID——可能参考**<a href="https://nice456.com/index.php/2021/02/21/apple-id/" target="_blank" rel="noopener">&gt;&gt;美国Apple ID注册方法&lt;&lt;</a>**</p><p>三、苹果手机从美区苹果ID上下载小火箭Shadowrocket，安装后并进行配置。</p><p>1、<strong><em>节点订阅设置</em></strong></p><p>打开小火箭Shadowrocket软件，点击右上角加号 + ，在添加节点页面，将类型改为第三个 Subscribe，打开购买的机场后台，复制订阅地址粘贴到URL中，然后点击右上角完成即可。<img src="../../../../images/tiktok-1.png" alt></p><p><img src="../../../../images/tiktok-2.png" alt>2、启用服务<img src="../../../../images/tiktok-3.png" alt></p><p>如上图所示，添加了节点之后，主界面（“首页”）节点列表就会出现你刚才添加的节点。</p><p>主界面右上角有一个开关，点那个开关连接节点；</p><p>第一次连接会弹出对话框提示添加代理，点 Allow 允许，不然不能用；</p><p>如果你有好几个节点，点击节点可以设为默认，每次连接都会连接默认节点，如果要连别的节点，则把别的节点设为默认；</p><p>至此，你应该已经成功可以在苹果手机上打开youtube和其它国外网站了，打开浏览器试试吧</p><p>3、打开小火箭，点击下方——配置——添加配置</p><p><img src="../../../../images/tiktok-4.png" alt></p><p>4、复制下面任意一个配置连接添加进去-点击下载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">日本 https://raw.githubusercontent.com/Semporia/TikTok-Unlock/master/Shadowrocket/TiKok-JP.conf </span><br><span class="line">台湾 https://raw.githubusercontent.com/Semporia/TikTok-Unlock/master/Shadowrocket/TiKok-TW.conf </span><br><span class="line">韩国 https://raw.githubusercontent.com/Semporia/TikTok-Unlock/master/Shadowrocket/TiKok-KR.conf</span><br><span class="line">美国 https://raw.githubusercontent.com/Semporia/TikTok-Unlock/master/Shadowrocket/TiKok-US.conf</span><br></pre></td></tr></table></figure><p><img src="../../../../images/tiktok-5.png" alt></p><p>5、点击远程文件下面的连接，选择使用配置，这个时候会提示“无法连接服务器”的提示，</p><p><img src="../../../../images/tiktok-6.png" alt></p><p>这个时候我们需要选中一个节点，打开开关</p><p><img src="../../../../images/tiktok-7.jpeg" alt></p><p>在去重复上面的步骤，点击使用配置，这个时候会提示“成功”</p><p>6、这个时候会出来一个配置文件，选中后点击-编辑配置</p><p><img src="../../../../images/tiktok-8.jpeg" alt="image"></p><p>7、找到HTTPS解密</p><p><img src="../../../../images/tiktok-9.jpeg" alt="image"></p><p>8、打开https解密开关，在点击——生成新的CA证书——安装证书</p><p><img src="../../../../images/tiktok-10.jpeg" alt="image"></p><p><img src="../../../../images/tiktok-11.jpeg" alt="image"></p><p>点击允许-关闭</p><p>9、打开手机设置，点击——已下载描述文件——安装</p><p><img src="../../../../images/tiktok-12.jpeg" alt="image"></p><p><img src="../../../../images/tiktok-13.jpeg" alt="image"></p><p>安装完成后如下图</p><p><img src="../../../../images/tiktok-14.jpeg" alt="image"></p><p>10、打开手机设置——关于本机——证书信任设置，点击进去，打开开关，点击继续，然后关闭</p><p><img src="../../../../images/tiktok-15.jpeg" alt="image"></p><p>回到小火箭，点击关闭，在点击右上角的√两次。</p><p>四、从美区苹果ID里下载tiktok</p><p>1、下载完成后，打开小火箭，选择配置，确保是这个配置文件</p><p><img src="../../../../images/tiktok-16.jpeg" alt="image"></p><p>2、找到全局路由选择——代理，打开上面的开关</p><p><img src="../../../../images/tiktok-17.jpeg" alt="image"></p><p>3、打开 tiktok就可以正常观看了</p><p><img src="../../../../images/tiktok-18.jpeg" alt="image"></p><p>温馨提示：如果打开的是黑屏，建议更换节点或者再次看一遍教程，以免操作失误导致的。</p>]]></content>
    
    <summary type="html">
    
      ios使用shadowrocket上tiktok教程
    
    </summary>
    
    
    
      <category term="tiktok ios" scheme="https://halaproliu.github.io/tags/tiktok-ios/"/>
    
  </entry>
  
  <entry>
    <title>Hexo</title>
    <link href="https://halaproliu.github.io/hexo/"/>
    <id>https://halaproliu.github.io/hexo/</id>
    <published>2021-09-09T04:20:50.315Z</published>
    <updated>2021-09-09T04:20:50.315Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2>Quick Start</h2><h3>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      使用hexo搭建博客
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>如何在 CentOS 8 上安装Jenkins</title>
    <link href="https://halaproliu.github.io/jekkins/"/>
    <id>https://halaproliu.github.io/jekkins/</id>
    <published>2020-05-16T10:53:23.000Z</published>
    <updated>2021-09-09T04:20:50.315Z</updated>
    
    <content type="html"><![CDATA[<p>Jenkins 是目前最流行的基于Java，开源的自动化服务器，它可以让你轻松地搭建持续集成和持续交付（CI/CD）平台。</p><p>持续集成（CI）是DevOps的一种实践，团队成员定期将其代码更改提交到版本控制存储库，然后运行自动构建和测试。持续交付（CD）是一系列实践，其中，代码变更后可以自动构建编译，测试并部署到生产中。</p><p>本教程主要讲解了如何一步一步在CentOS 8上安装Jenkins的步骤。</p><h3>安装Jenkins</h3><p>在CentOS 8 上安装Jenkins需要使用root账号或具有sudo权限的账号。</p><p>第一步、因为Jenkins是使用Java编写的，所以需要安装Java环境，Jenkins需要Java8或更高版本。</p><p>这里使用OpenJDK，首先通过一下命令安装OpenJDK.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install java<span class="number">-1.8</span><span class="number">.0</span>-openjdk-devel</span><br></pre></td></tr></table></figure><p>如果系统上安装了多个Java版本，请确保Java 8是默认Java版本。</p><p>你可能对关于更详细如何在CentOS上安装Java教程也感兴趣。</p><p>第二步、启用Jenkins存储库。运行以下命令下载并导入GPG密钥：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo wget -O /etc/yum.repos.d/jenkins.repo http:<span class="comment">//pkg.jenkins-ci.org/redhat-stable/jenkins.repo</span></span><br><span class="line">sudo rpm --<span class="keyword">import</span> https:<span class="comment">//jenkins-ci.org/redhat/jenkins-ci.org.key</span></span><br></pre></td></tr></table></figure><p>第三步、通过键入以下命令安装最新的Jenkins稳定版本：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install jenkins</span><br></pre></td></tr></table></figure><p>安装过程完成后，启动Jenkins服务并启用它以在系统引导时启动：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start jenkins</span><br><span class="line">sudo systemctl enable jenkins</span><br></pre></td></tr></table></figure><p>检查Jenkins是否正在运行，请输入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status jenkins</span><br></pre></td></tr></table></figure><p>输出应类似如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Loaded: loaded (<span class="regexp">/etc/</span>rc.d/init.d/jenkins; generated)</span><br><span class="line">Active: active (running) since Thu <span class="number">2019</span><span class="number">-11</span><span class="number">-05</span> <span class="number">21</span>:<span class="number">31</span>:<span class="number">36</span> UTC; <span class="number">3</span>s ago</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3>配置防火墙</h3><p>如果要在受防火墙保护的远程CentOS服务器上安装Jenkins，则需要开放8080端口。</p><p>使用以下命令打开必要的端口：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --zone=public --add-port=<span class="number">8080</span>/tcp</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3>设置Jenkins</h3><p>安装完成并在防火墙上放开8080端口口，就可以开始Jenkins设置过程。首先，请打开浏览器并键入域或服务器的IP地址，然后键入port 8080：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//your_ip_or_domain:8080</span></span><br></pre></td></tr></table></figure><p>将会出现类似以下的屏幕，提示您输入在安装过程中创建的管理员密码：</p><p><img src="../../../../images/unlockJekkins.webp" alt></p><p>可以使用cat命令在服务器CentOS 8上查看Jenkins的管理员账号密码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cat /<span class="keyword">var</span>/lib/jenkins/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure><p>您应该看到一个32个字符长的字母数字密码，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e3bc55dh402640c54360b8db41e4f3au</span><br></pre></td></tr></table></figure><p>从终端复制密码，将其粘贴到“管理员密码”字段中，然后单击“继续”。</p><p><img src="../../../../images/installPlugin.webp" alt></p><p>在下一个屏幕上，系统将询问您是否要安装建议的插件或选择要安装的插件。单击“安装建议的插件”框，安装过程将开始。</p><p><img src="../../../../images/installing.webp" alt></p><p>安装完成后，将提示您设置第一个管理用户。填写所有必需的信息，然后单击“保存并继续”。</p><p><img src="../../../../images/createUser.webp" alt></p><p>在下一页上，安装程序将要求您设置Jenkins实例的URL。URL字段将填充自动生成的URL。</p><p><img src="../../../../images/instanceConfiguration.webp" alt></p><p>要完成设置，请单击“保存并完成”按钮确认URL。</p><p><img src="../../../../images/jekkinsReady.webp" alt></p><p>最后，单击“开始使用Jenkins”按钮，您将被重定向到以您在前面的步骤之一中创建的admin用户身份登录的Jenkins仪表板。</p><p><img src="../../../../images/jekkinsSuccess.webp" alt></p><p>如果您到了这一步，则说明您已经在CentOS系统上成功安装了Jenkins。</p>]]></content>
    
    <summary type="html">
    
      如何在 CentOS 8 上安装Jenkins
    
    </summary>
    
    
    
      <category term="jekkins,centos,centos8" scheme="https://halaproliu.github.io/tags/jekkins-centos-centos8/"/>
    
  </entry>
  
  <entry>
    <title>非常好看的屏幕截图工具Carbon和polacode</title>
    <link href="https://halaproliu.github.io/screenCapture/"/>
    <id>https://halaproliu.github.io/screenCapture/</id>
    <published>2019-12-13T15:42:51.000Z</published>
    <updated>2021-09-09T04:20:50.315Z</updated>
    
    <content type="html"><![CDATA[<h3>Carbon</h3><p><a href="https://carbon.now.sh" target="_blank" rel="noopener">Carbon</a>是一个免费的开源库，用于创建和分享源代码的美丽图像。 你可以通过访问 https://carbon.now.sh轻松使用<a href="https://carbon.now.sh" target="_blank" rel="noopener">Carbon</a>。 无论是简单地开始在框中编写代码，或者将文件放入网站上提供的文本区域。</p><p><img src="../../../../images/carbon.png" alt></p><h5>效果</h5><p><img src="../../../../images/carbonDemo.png" alt></p><h3>Polacode</h3><p>Polacode 是 Visual Studio Code 的扩展，可让你快速创建精彩的代码截图。它将所有的样式和主题保留在同一个地方。</p><p>你可能会想，为什么不只是截图。</p><ul><li>它在Windows和Linux上生成体面的图像</li><li>它隐藏了你可能不喜欢的错误，警告，行号和其他标记</li><li>它给你很好的视觉效果</li></ul><p>你可以通过打开扩展窗口并搜索 Polacode，从 visual studio code 轻松安装 Polacode。然后点击安装，你有这个扩展。</p><p>现在打开你想要的文件。 在屏幕截图中选择你想要的代码并复制它。 现在转到 View&gt; Command Palette，然后在框中输入&gt; polacode 并选择 Polacode 选项。 它将创建一个单独的水平窗口。 点击窗口并在 Windows上 按 Ctrl + V 或 Mac上的 Cmd + V 粘贴代码。 在代码下面，你粘贴另一个窗口，会看到像图标这样的摄像头。 点击这个图标并保存图片。</p><p><img src="../../../../images/polacode1.png" alt></p><h3>截图效果</h3><p><img src="../../../../images/polacode2.png" alt></p>]]></content>
    
    <summary type="html">
    
      Carbon和polacode截图工具
    
    </summary>
    
    
    
      <category term="代码屏幕截图" scheme="https://halaproliu.github.io/tags/%E4%BB%A3%E7%A0%81%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Mac安装FTP终端工具</title>
    <link href="https://halaproliu.github.io/macFtp/"/>
    <id>https://halaproliu.github.io/macFtp/</id>
    <published>2019-09-16T02:58:42.000Z</published>
    <updated>2021-09-09T04:20:50.315Z</updated>
    
    <content type="html"><![CDATA[<h3>使用HomeBrew安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew install telnet </span><br><span class="line">brew install inetutils </span><br><span class="line">brew link --overwrite inetutils</span><br></pre></td></tr></table></figure><p>使用如下命令确认是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><h3>如何连接ftp</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp &lt;server-ip&gt;</span><br></pre></td></tr></table></figure><h3>上传下载命令</h3><p>上传：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">put &lt;<span class="built_in">local</span>-filepath&gt; &lt;remote-filepath&gt;</span><br></pre></td></tr></table></figure><p>下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get &lt;remote-filepath&gt; &lt;<span class="built_in">local</span>-filepath&gt;</span><br></pre></td></tr></table></figure><h3>更多命令</h3><p>连接ftp后，可以使用help命令进行查看。</p><h3>退出ftp</h3><p>直接输入quit即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp&gt; quit</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Mac安装FTP终端工具
    
    </summary>
    
    
    
      <category term="Mac" scheme="https://halaproliu.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Mac使用shadowsocks配合Proxies接收gmail</title>
    <link href="https://halaproliu.github.io/proxies/"/>
    <id>https://halaproliu.github.io/proxies/</id>
    <published>2019-09-16T02:58:42.000Z</published>
    <updated>2021-09-09T04:20:50.315Z</updated>
    
    <content type="html"><![CDATA[<h3>使用Proxies配合Shadowsocks翻墙</h3><p><img src="../../../../images/proxies.png" alt><img src="../../../../images/addProxies.png" alt><img src="../../../../images/rule.png" alt><img src="../../../../images/outlook.png" alt><img src="../../../../images/messenger.png" alt></p><p>ok,接下来就可以愉快的使用messenger和gmail了。</p>]]></content>
    
    <summary type="html">
    
      Mac使用shadowsocks配合Proxies接收gmail
    
    </summary>
    
    
    
      <category term="Mac" scheme="https://halaproliu.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>个人博客评论插件之gittalk</title>
    <link href="https://halaproliu.github.io/gittalk/"/>
    <id>https://halaproliu.github.io/gittalk/</id>
    <published>2019-09-10T04:37:52.000Z</published>
    <updated>2021-09-09T04:20:50.315Z</updated>
    
    <content type="html"><![CDATA[<h3>前言</h3><p>之前一直在掘金和简书上发技术文章，由于查询起来不太方便，于是便想自己搭建一个博客。由于使用的是hexo搭建的博客，开发一个自己的评论系统有些费劲，于是便想着找找有什么第三方的评论插件。主要看中的有两个，一个是disqus，还有一个是gittalk。鉴于disqus被墙了，需要科学上网才能使用，只能pass了。</p><h5>gittalk如何集成呢？</h5><ol><li>首先，需要去github创建一个仓库用于存放评论功能。鉴于我的博客本身就是使用github pages搭建的，所以这部可以省略。</li><li>打开github仓库的issues功能<img src="../../../../images/gittalk1.jpg" alt><img src="../../../../images/gittalk2.jpg" alt></li><li>注册一个<a href="https://github.com/settings/developers" target="_blank" rel="noopener">Github Application</a><img src="../../../../images/gittalk3.jpg" alt></li></ol><ul><li>Application name: 可以随便写</li><li>Homepage URL：就是博客的网址</li><li>Authorization callback URL: 就是github权限验证的回调地址，一般默认就是域名</li></ul><ol start="4"><li>创建成功后，就可以获取到Client ID和Client Secret了,保存下来。<img src="../../../../images/gittalk4.jpg" alt></li><li>在博客里集成gittalk集成的方式呢，有两种：</li></ol><ul><li>链接方式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css"</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js"</span>&gt;&lt;/script&gt; </span><br><span class="line"> </span><br><span class="line">&lt;!-- or --&gt;</span><br><span class="line"> </span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://unpkg.com/gitalk/dist/gitalk.css"</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://unpkg.com/gitalk/dist/gitalk.min.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>npm install</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save gitalk</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'gitalk/dist/gitalk.css'</span></span><br><span class="line"><span class="keyword">import</span> Gitalk <span class="keyword">from</span> <span class="string">'gitalk'</span></span><br></pre></td></tr></table></figure><p>然后在dom里，添加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"gitalk-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着使用下面的语句初始化gittalk：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gitalk = <span class="keyword">new</span> Gitalk(&#123;</span><br><span class="line">  clientID: <span class="string">'GitHub Application Client ID'</span>,</span><br><span class="line">  clientSecret: <span class="string">'GitHub Application Client Secret'</span>,</span><br><span class="line">  repo: <span class="string">'GitHub repo'</span>,</span><br><span class="line">  owner: <span class="string">'GitHub repo owner'</span>,</span><br><span class="line">  admin: [<span class="string">'GitHub repo owner and collaborators, only these guys can initialize github issues'</span>],</span><br><span class="line">  id: location.pathname,      <span class="comment">// Ensure uniqueness and length less than 50</span></span><br><span class="line">  distractionFreeMode: <span class="literal">false</span>  <span class="comment">// Facebook-like distraction free mode</span></span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">gitalk.render(<span class="string">'gitalk-container'</span>)</span><br></pre></td></tr></table></figure><p>常见的参数就是以上这些，更多的参数，查看<a href="https://gitalk.github.io/" target="_blank" rel="noopener">gitalk</a></p><h5>遇到的问题</h5><p>在使用过程中，gittalk会出现Validation failed的错误。原因是id参数不能超过50个字符，但是gittalk的id会自动添加文章名，由于我的url都包含较长的中文，所以出现了这个错误。解决方法：使用md5加密location.href,传入id参数</p><h5>gitbook集成gittalk</h5><p>由于没有找到现成的插件，所以，我写了个新的插件。</p><p><img src="../../../../images/gittalk5.jpg" alt></p><p>使用方法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意gittalk，最好放在插件的最后一位</span></span><br><span class="line"><span class="string">"plugins"</span>: [</span><br><span class="line">  <span class="string">"gittalk"</span></span><br><span class="line">],</span><br><span class="line"><span class="string">"pluginConfig"</span>: &#123;</span><br><span class="line">  <span class="string">"gittalk"</span>: &#123;</span><br><span class="line">    clientID: <span class="string">'GitHub Application Client ID'</span>,</span><br><span class="line">    clientSecret: <span class="string">'GitHub Application Client Secret'</span>,</span><br><span class="line">    repo: <span class="string">'GitHub repo'</span>,</span><br><span class="line">    owner: <span class="string">'GitHub repo owner'</span>,</span><br><span class="line">    admin: [<span class="string">'GitHub repo owner and collaborators, only these guys can initialize github issues'</span>],</span><br><span class="line">    distractionFreeMode: <span class="literal">false</span>  <span class="comment">// Facebook-like distraction free mode</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着执行以下指令安装即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook install</span><br></pre></td></tr></table></figure><h5>效果图</h5><p><img src="../../../../images/gittalk7.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      一个非常好用的第三方评论插件，可以同时在gitbook和hexo搭建的博客上使用
    
    </summary>
    
    
    
      <category term="gittalk" scheme="https://halaproliu.github.io/tags/gittalk/"/>
    
  </entry>
  
  <entry>
    <title>Mac打造个人开发环境-vscode篇</title>
    <link href="https://halaproliu.github.io/vscode/"/>
    <id>https://halaproliu.github.io/vscode/</id>
    <published>2019-09-08T12:55:43.000Z</published>
    <updated>2021-09-09T04:20:50.315Z</updated>
    
    <content type="html"><![CDATA[<h3>前言</h3><p>俗话说，工欲善其事，必先利其器。作为一个开发人员，一个好的开发工具是coding体验的基础。今天就来介绍一下一些vscode好用的插件，至于vscode是什么，就不用我说了吧，巨硬大法好。</p><h5>Auto Close Tag</h5><p>这款插件能够自动添加html或xml标签的结束标签，提升开发效率有没有。</p><h5>Auto Import</h5><p>前端工程化进行到今天，模块化开发已经是非常普及了。Auto Import提供自动模块引入提示，省心又省力，减少编写路径的时间，想想都觉得美妙。</p><h5>Auto Rename Tag</h5><p>当需要修改html或xml标签时，起始和结尾各改一次，多麻烦啊，万一标签的子节点很多，还要拖动去寻找结束标签，这款插件省去了不少时间。</p><h5>Bracket Pair Colorizer</h5><p>相对应的大括号变成相同的颜色，轻松的知道代码代码结构</p><h5>Document this</h5><p>自动生成注释，方便后续review代码。</p><h5>GitLens</h5><p>让你拥有在vscode查看git提交记录，对比记录，提交，pull代码等各种git常用操作。</p><h5>indent-rainbow</h5><p>添加缩进的颜色块，让代码缩进更加直观。</p><h5>Markdown Preview Enhanced</h5><p>预览markdown的功能，让vscode编写markdown更简单</p><h5>Path Intellisense</h5><p>自动路径补全，不用再去翻目录结构了</p><h5>Project Manager</h5><p>项目管理工具，可以方便的配置多个工程到命令行中，快速选取指定工程</p><h5>view-in-browser</h5><p>在vscode中，右键打开浏览器，不用去浏览器输入文件路径，也不用直接去找文件打开了。</p>]]></content>
    
    <summary type="html">
    
      俗话说，工欲善其事，必先利其器。作为一个开发人员，一个好的开发工具是coding体验的基础。
    
    </summary>
    
    
    
      <category term="mac" scheme="https://halaproliu.github.io/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>Mac终端神器iterm2和zsh</title>
    <link href="https://halaproliu.github.io/iterm2zsh/"/>
    <id>https://halaproliu.github.io/iterm2zsh/</id>
    <published>2019-09-07T12:16:29.000Z</published>
    <updated>2021-09-09T04:20:50.315Z</updated>
    
    <content type="html"><![CDATA[<p>Mac自带的终端实在是太丑了，所以特意下载了iterm2，配色高大上，加上zsh，命令行更加方便了！</p><p>附上iterm2的图：</p><p><img src="../../../../images/iterm2.jpg" alt="iterm2"></p><h3>安装iterm2的方式：</h3><ol><li><a href="https://www.iterm2.com/" target="_blank" rel="noopener">iterm2</a>官网</li><li>使用<a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a>安装，<a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a> 是一款开源的软件包管理系统，用以简化 macOS 上的软件安装过程，可以类比于 Windows 上软件管家的一键安装。Homebrew 在 2009 年由马克斯·霍威尔（Max Howell）写成，它在 GitHub 上拥有大量贡献者，目前仍处于活跃状态。</li></ol><p>在终端中输入以下命令安装homebrew</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure><p>将以上命令粘贴至终端中执行。然后执行命令 brew tap caskroom/cask 获取 Homebrew Cask。</p><p>接着执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install iterm2</span><br></pre></td></tr></table></figure><h3>安装zsh</h3><p>鉴于zsh需要大量配置，直接安装<a href="https://ohmyz.sh/" target="_blank" rel="noopener">oh-my-zsh</a>,<a href="https://ohmyz.sh/" target="_blank" rel="noopener">oh-my-zsh</a>是一个开源的zsh配置。</p><h5>使用curl安装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure><h5>使用wget安装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</span><br></pre></td></tr></table></figure><p>Mac系统默认使用bash作为终端，可以使用命令修改为zsh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><p>如果想改回bash，同样使用chsh命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/bash</span><br></pre></td></tr></table></figure><h3>接着让我们来配置zsh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># If you come from bash you might have to change your $PATH.</span></span><br><span class="line"><span class="comment"># export PATH=$HOME/bin:/usr/local/bin:$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Path to your oh-my-zsh installation.</span></span><br><span class="line"><span class="built_in">export</span> ZSH=/Users/liuwenjian/.oh-my-zsh</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set name of the theme to load. Optionally, if you set this to "random"</span></span><br><span class="line"><span class="comment"># it'll load a random theme each time that oh-my-zsh is loaded.</span></span><br><span class="line"><span class="comment"># See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes</span></span><br><span class="line">ZSH_THEME=<span class="string">"bira"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to use case-sensitive completion.</span></span><br><span class="line"><span class="comment"># CASE_SENSITIVE="true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to use hyphen-insensitive completion. Case</span></span><br><span class="line"><span class="comment"># sensitive completion must be off. _ and - will be interchangeable.</span></span><br><span class="line"><span class="comment"># HYPHEN_INSENSITIVE="true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to disable bi-weekly auto-update checks.</span></span><br><span class="line"><span class="comment"># DISABLE_AUTO_UPDATE="true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to change how often to auto-update (in days).</span></span><br><span class="line"><span class="comment"># export UPDATE_ZSH_DAYS=13</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to disable colors in ls.</span></span><br><span class="line"><span class="comment"># DISABLE_LS_COLORS="true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to disable auto-setting terminal title.</span></span><br><span class="line"><span class="comment"># DISABLE_AUTO_TITLE="true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to enable command auto-correction.</span></span><br><span class="line"><span class="comment"># ENABLE_CORRECTION="true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to display red dots whilst waiting for completion.</span></span><br><span class="line"><span class="comment"># COMPLETION_WAITING_DOTS="true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line if you want to disable marking untracked files</span></span><br><span class="line"><span class="comment"># under VCS as dirty. This makes repository status check for large repositories</span></span><br><span class="line"><span class="comment"># much, much faster.</span></span><br><span class="line"><span class="comment"># DISABLE_UNTRACKED_FILES_DIRTY="true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line if you want to change the command execution time</span></span><br><span class="line"><span class="comment"># stamp shown in the history command output.</span></span><br><span class="line"><span class="comment"># The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"</span></span><br><span class="line"><span class="comment"># HIST_STAMPS="mm/dd/yyyy"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Would you like to use another custom folder than $ZSH/custom?</span></span><br><span class="line"><span class="comment"># ZSH_CUSTOM=/path/to/new-custom-folder</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)</span></span><br><span class="line"><span class="comment"># Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/</span></span><br><span class="line"><span class="comment"># Example format: plugins=(rails git textmate ruby lighthouse)</span></span><br><span class="line"><span class="comment"># Add wisely, as too many plugins slow down shell startup.</span></span><br><span class="line">plugins=(</span><br><span class="line">git git-extras web-search osx</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> <span class="variable">$ZSH</span>/oh-my-zsh.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># User configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># export MANPATH="/usr/local/man:$MANPATH"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You may need to manually set your language environment</span></span><br><span class="line"><span class="comment"># export LANG=en_US.UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Preferred editor for local and remote sessions</span></span><br><span class="line"><span class="comment"># if [[ -n $SSH_CONNECTION ]]; then</span></span><br><span class="line"><span class="comment">#   export EDITOR='vim'</span></span><br><span class="line"><span class="comment"># else</span></span><br><span class="line"><span class="comment">#   export EDITOR='mvim'</span></span><br><span class="line"><span class="comment"># fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Compilation flags</span></span><br><span class="line"><span class="comment"># export ARCHFLAGS="-arch x86_64"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ssh</span></span><br><span class="line"><span class="comment"># export SSH_KEY_PATH="~/.ssh/rsa_id"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set personal aliases, overriding those provided by oh-my-zsh libs,</span></span><br><span class="line"><span class="comment"># plugins, and themes. Aliases can be placed here, though oh-my-zsh</span></span><br><span class="line"><span class="comment"># users are encouraged to define aliases within the ZSH_CUSTOM folder.</span></span><br><span class="line"><span class="comment"># For a full list of active aliases, run `alias`.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example aliases</span></span><br><span class="line"><span class="comment"># alias zshconfig="mate ~/.zshrc"</span></span><br><span class="line"><span class="comment"># alias ohmyzsh="mate ~/.oh-my-zsh"</span></span><br><span class="line"><span class="comment"># nvm_dir</span></span><br><span class="line"><span class="comment">#autojump</span></span><br><span class="line">[ -f /usr/<span class="built_in">local</span>/etc/profile.d/autojump.sh ] &amp;&amp; . /usr/<span class="built_in">local</span>/etc/profile.d/autojump.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#alias vsc="/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code"</span></span><br></pre></td></tr></table></figure><ol><li>可以通过修改ZSH_THEME字段来选择终端主题配色。</li><li>同时zsh支持插件，介绍几个好用的插件</li></ol><ul><li>git</li><li>git-extras</li><li>web-search</li><li>osx</li><li>autojump</li></ul><h5>git</h5><p>作用是可以使用git命令缩写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add .  ===  gaa</span><br><span class="line">git commit -m === gcmsg</span><br><span class="line">git push === gp</span><br><span class="line">git pull === gl</span><br></pre></td></tr></table></figure><h5>autojump</h5><p>作用是可以快速跳转到已经进过的文件夹</p><p>比如你曾经使用cd命令进到过~/github/hexo文件夹,下一次想进入直接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">j hexo <span class="comment">## 甚至可以使用缩写，j he</span></span><br></pre></td></tr></table></figure><p>即可</p><p>Mac可以直接使用Homebrew安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install autojump</span><br></pre></td></tr></table></figure><p>最后把以下代码加入.zshrc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[ -s ~/.autojump/etc/profile.d/autojump.sh ]] &amp;&amp; . ~/.autojump/etc/profile.d/autojump.sh</span><br></pre></td></tr></table></figure><p>接着在终端执行以下命令，使其生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><h5>web-serach</h5><p>它的作用是能让我们在命令行中使用搜索引擎进行搜索</p><p><img src="../../../../images/web-search.jpg" alt="web-search"></p>]]></content>
    
    <summary type="html">
    
      Mac上必备的开发神器。
    
    </summary>
    
    
    
      <category term="mac" scheme="https://halaproliu.github.io/tags/mac/"/>
    
  </entry>
  
</feed>
